//
//  mediator.swift
//  swifttern
//
//  Created by Иван Галкин on 09.02.2024.
//

//
// Посредник
// Паттерн поведения объектов.
//
// Назначение:
// Определяет объект, инкапсулирующий способ взаимодействия множества объектов. Посредник обеспечивает
// слабую связанность системы, избавляя объекты от необходимости явно ссылаться друг на друга и позволяя
// тем самым независимо изменять взаимодействия между ними.
//
// Применимость:
// - существование объектов, связи между которыми сложны и четко определены. Получающиеся при этом
// взаимозависимости не структурированы и трудны для понимания;
// - повторное использование объекта затруднено, поскольку он обменивается информацией со многими другими
// объектами;
// - поведение, распределенное между несколькими классами, должно настраиваться без порождения множества
// подклассов.
//
// Результаты:
// - снижение числа порождаемых подклассов;
// - ослабление связей между коллегами;
// - упрощение протоколов взаимодействия объектов;
// - абстрагирование способа кооперирования объектов;
// - централизация управления.
//
// Родственные паттерны:
// Фасад отличается от посредника тем, что он асбтрагирует некоторую подсистему объектов для предоставления
// более удобного интерфейса. Его протокол однонаправленный, то есть объекты фасада нправляют запросы классам
// подсистемы, но не наоборот. Посредник же обеспечивает совместное поведение, которое объекты-коллеги не могут
// или не хотят реализовывать, а его протокол двунаправленный.
// Коллеги могут обмениваться информацией с посредником с помощью паттерна наблюдатель.
//

//
// Отношения:
// - коллеги посылают запросы посреднику и получают запросы от него. Посредник реализует кооперативное поведение
// путем переадресации каждого запроса подходящему коллеге (или нескольим коллегам).
//
// Аспекты реализации:
// - избавление от абстрактного класса Mediator;
// - обмен информацией между коллегами и посредником.
//

// Посредник
// - определяет интерфейс для обмена информацией с объектами Colleague;
protocol Mediator {}

// Конкретный посредник
// - реализует кооперативное поведение, координируя действия объектов Colleague;
// - владдет информацией о коллегах и подсчитывает их.
class ConcreteMediator: Mediator {
    init() {
        self.collegueA = Colleague(mediator: self)
        self.collegueB = Colleague(mediator: self)
    }
    
    var collegueA: Colleague
    var collegueB: Colleague
}

// Коллега
// - каждый класс Colleague знает свой объект Mediator;
// - все коллеги обмениваются информацией только с посредником во всех случаях, когда ему пришлось бы напрямую
// взаимодействовать с другими объектами.
class Colleague {
    init(mediator: Mediator) {
        self.mediator = mediator
    }
    
    var mediator: Mediator
}
