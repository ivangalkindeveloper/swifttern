//
//  chain_of_responsibility.swift
//  swifttern
//
//  Created by Иван Галкин on 01.02.2024.
//

//
// Цепочка обязанностей
// Паттерн поведения объектов.
//
// Назначение:
// Позволяет избежать привязки отправителя запроса к его получателю, предоставляя возможность обработать запрос
// нескольким объектам. Связывает объекты-получатели в цепочку и передает запрос по этой цепочке, пока он
// не будет обработан до конца.
//
// Применимость:
// - запрос может быть обработан более чем одним объектом, причем настоящий обработчик заранее неизвестен
// и должен быть найден автоматически;
// - запрос должен быть отправлен одному из нескольких объектов, без явного указания, какому именно;
// - набор объектов, способных обработать запрос, должен задаваться динамически.
//
// Результаты:
// - ослабление связанности;
// - дополнительная гибкость при распределении обязанностей между объектами;
// - получение не гарантированно.
//
// Родственные паттерны:
// Паттерн цепочка обязанностей часто применяется вместе с паттерном компоновщик. В этом случае родитель
// компонента может выступать в роли его преемника.
//

//
// Отношения:
// - запрос, инициированный клиентом, продвигается по цепочке, пока некоторый объект ConcreteHandler не возьмет
// на себя ответственность за его обработку.
//
// Аспекты реализации:
// - реализация цепочки преемников;
// - соединение преемников;
// - предоставление запросов;
// - автоматическое перенаправление запросов как особенность языка.
//

// Обработчик
// - определяет интерфейс для обработки запросов;
// - (необязательно) реализует связь с преемником;
protocol Handler {
    func handleRequest()
}

// Конкретный обработчик
// - обрабатывает запрос, за который отвечает;
// - имеет доступ к своему преемнику;
// - если ConcreteHandler способен обработать запрос, то так и делает, если не может,
// то отправляет своему преемнику.
class ConcreteHandler1 : Handler {
    init(successor: ConcreteHandler2) {
        self.successor = successor
    }
    
    var successor: ConcreteHandler2
    
    func handleRequest() {}
}

class ConcreteHandler2 : Handler {
    func handleRequest() {}
}

// Клиент запроса
// - отправляет запрос некоторому объекту ConcreteHandler в цепочке.
class Client {
    init(handler: ConcreteHandler1) {
        self.handler = handler
    }
    
    var handler: ConcreteHandler1
    
    func request() {
        self.handler.handleRequest()
    }
}
