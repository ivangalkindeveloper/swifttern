//
//  command.swift
//  swifttern
//
//  Created by Иван Галкин on 01.02.2024.
//

//
// Команда
// Паттерн поведения объектов.
//
// Назначение:
// Инкапсулирует запрос в объекте, позволяя тем самым параметризовать клиенты для разных запросов,
// ставить запросы в очередь или протоколировать их, а также поддерживать отмену операций.
//
// Другие названия:
// Action (действие), Transaction (транзакция)
//
// Применимость:
// - параметризация объектов выполняемым действием, как в случае с пунктами меню;
// - определение, постановка в очередь и выполнение запросов в разное время;
// - поддержка отмены операций;
// - поддержка протоколирования изменений, чтобы их можно было выполнить повторно после сбоя системы;
// - структурирование системы на основе высокоуровневых операций, построенных из примитивных.
//
// Результаты:
// - команда отделяет объект, инициирующий операцию, от объекта, располагающего информацией о том,
// как ее выполнить;
// - команды - это самые настоящие объекты. Их можно обрабатывать и расширять точно так же, как любые
// другие объекты;
// - из простых команд можно собирать составные, например класс MacroCommand. В общем случае составные
// команды описываются паттерном компоновщик;
// - новые команды добавляются легко, поскольку никаки существующие классы изменять не нужно.
//
// Родственные паттерны:
// Паттерн компоновщик можно использовать для реализации макро-комманд.
// Паттерн хранитель может сохранять состояние, необходимое команде для отмены ее действия.
// Команда, которую нужно копировать перед помещением в список истории, ведет себя, как прототип.
//

//
// Отношения:
// - клиент создает объект ConcreteCommand и устанавливает для него получателя;
// - инициатор Invoker сохраняет объект ConcreteCommand;
// - инициатор отправляет запрос, вызывая операцию команды Execute. Если поддерживается отмена выполненных
// действий, то ConcreteCommand перед вызовом Execute сохраняет информацию о состоянии, достаточную
// для выполнения отмены;
// - объект ConcreteCommand вызывает операции получателя для выполнения запроса.
//
// Аспекты реализации:
// - насколько умной должна быть команда;
// - поддержка отмены и повтора операций;
// - предотвращение накопления ошибок в процессе отмены.
//

// Команда
// - объявляет интерфейс для выполнения операции.
protocol Command {
    func execute()
}

// Конкретная команда
// - определяет связь между объектом-получаетелем Receiver и действием;
// - реализует операцию Execute путем вызова соответствующих операций объекта Receiver.
class ConcreteCommand: Command {
    func execute() {}
}

// Клиента запроса
// - создает объекта класса ConcreteCommand и устанавливает его получателя.
class Client {
    init(receiver: Receiver) {
        self.receiver = receiver
    }
    
    var receiver: Receiver
    
    func action() {
        self.receiver.action();
    }
}

// Инициатор
// - обращается к команде для выполнения запроса,
class Invoker {
    init(command: ConcreteCommand) {
        self.command = command
    }
    
    var command : ConcreteCommand
    
    func execute() {
        self.command.execute()
    }
}
// Получатель
// - распологает информацией о способах выполнения операций, необходимых для удовлетворения запроса.
// В роли получателя может выступать любой класс.
class Receiver {
    init(command: ConcreteCommand) {
        self.command = command
    }
    
    var command : ConcreteCommand
    
    func action() {
        self.command.execute();
    }
}
