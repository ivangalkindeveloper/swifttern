//
//  proxy.swift
//  swifttern
//
//  Created by Иван Галкин on 22.01.2024.
//

//
// Заместитель
// Паттерн, структурирующий объекты.
//
// Назначение:
// Является суррогатом другого объекта и контролирует доступ к нему.
//
// Другие названия:
// Surrogate (суррогат)
//
// Применимость:
// Паттерн заместитель применим во всех случаях, когда возникает необходимость сослаться на объект более гибким
// или нетривиальным способом, чем при использовании простого указателя. Несколько типичных ситуаций, в которых
// заместитель может оказаться полезным:
// - удаленный заместитель предоставляет локального представителя для объекта, находящегося в другом
// адресном пространстве;
// - виртуальный заместитель создает "тяжелые" объекты по требованию;
// - защищающий заместитель контролирует доступ к исходному объекту;
// - "умная" ссылка - это замена обычного указателя. Она позволяет выполнить дополнительные действия
// при доступе к объекту. К типичным применениям такой ссылки можно отнести:
//   - подсчет числа ссылок на реальный объект, с тем чтобы занимаемую им память можно было освободить
//   автоматически, когда не останется ни одной ссылки;
//   - загрузку объекта из долгосрочного хранилища в память при первом обращении к нему;
//   - проверку и установку блокировки на реальный объект при обращении к нему, чтобы
//   никакой другой объект не смог в этом время изменить его.
//
// Результаты:
// С помощью паттерна заместитель при доступе к объекту вводится дополнительный уровень косвенности.
// У этого подхода есть много вариантов в зависимости от вида заместителя:
// - удаленный заместитель может скрыть тот факт, что объект находится в другом адресном пространстве;
// - виртуальный заместитель может выполнять оптимизацию, например создание объекта по требованию;
// - защищающий заместитель и "умная" ссылка позволяют решать дополнительные задачи при доступе к объекту.
// Есть еще одна потимизация, которую паттерн заместитель иногда скрывает от клиента. Она называется
// копированием при записи (copy-on-write) и имеет много общего с созданием объекта по требованию.
// Копирование большого и сложного объекта - очень затратная операция. Если копия не модифицировалась,
// то нет смысла эту цену платить. Если отложить процесс копирования, применив паттерн заместитель,
// то можно быть уверенным, что эта операция произойдет только тогда, когда он действительно был изменен.
// Чтобы во время записи можно было копировать, необходимо подсчитывать ссылки на субъект. Копирование
// заместителя просто увеличивает счетчик ссылок. И только тогда, когда клиент запрашивает операцию,
// изменяющую субъект, заместитель действительно выполняет копирование. Одновременно заместитель
// должен уменьшить счетчик ссылок. Когда счетчик ссылок становится равным нулю, субъект уничтожается.
// Копирование при записи может существенно уменьшить плату за копирование "тяжелых" объектов.
//
// Родственные паттерны:
// Адаптер: предоставляет другой интерфейс к адаптируемому объекту. Напротив, заместитель в точности
// повторяет интерфейс своего субъекта. Однако, если заместитель используется для ограничения доступа,
// он может отказаться выполнять операцию, которую субъект выполнил бы, поэтому на самом деле интерфейс
// заместителя может быть и подмножеством интерфейса субъекта.
// Декоратор: хотя его реализация и похожа на реализацию заместителя, но назначение совершенно иное.
// Декоратор добавляет объекту новые обязанности, а зместитель контролирует доступ к объекту.
// Степень схожести реализации заместителей и декораторов может быть различной. Защищающий заместитель
// мог бы быть реализован в точности как декоратор. С другой стороны, удаленный заместитель не содержит
// прямых ссылок на реальный субъект, а лишь косвенную ссылку, что-то вроде "идентификатор хоста и
// локальный адрес на этом хосте". Вначале виртуальный заместитель имеет только косвенную ссылку
// (скажем, имя файла), но в конечном итоге получает и использует прямую ссылку.
//

//
// Отношения:
// - Proxy при необходимости переадресует запросы объекты RealSubject. Детали зависят от вида заместителя.
//
// Аспекты реализации:
// - перегрузку оператора обращения к членам класса;
// - заместителю не всегда должен быть известен тип реального объекта.
//

// Субъект
// - определяет общий для RealSubject и Proxy интерфейс, так что класс Proxy можно использовать везде,
// где ожидается RealSubject.
protocol Subject {
    func request()
}

// Заместитель
// - хранит ссылку, которая позволяет заместителю обратиться к реальному субъекту.
// Объект класса Proxy может обращаться к объекту класса Subject, если интерфейсы
// классов Subject и RealSubject одинаковы;
// - предоставляет интерфейс, идентичный интерфейсу Subject, так что заместитель всегда
// может быть подставлен вместо реального субъекта;
// - контролирует доступ к реальному субъекту и может отвечать за его создание и удаление;
// - прочие обязанности зависят от вида заместителя:
//   - удаленный заместитель отвечает за кодирование запроса и его аргументов и отправление
//   закодированного запроса реальному субъекту в другом адресном пространстве;
//   - виртуальный заместитель может кешировать дополнительную информацию о реальном субъекте,
//   чтобы отложить его создание.
//   - защищающий заместитель проверяет, имеет или вызывающий объект необходимые для выполнения
//   запроса права.
class Proxy: Subject {
    init(realSubject: RealSubject) {
        self.realSubject = realSubject
    }
    
    var realSubject: RealSubject;
    
    func request() {
        realSubject.request()
    }
}

// Реальный субъект
// - определяет реальный объект, представленный заместителем
class RealSubject: Subject {
    func request() {}
}
