//
//  decorator.swift
//  swifttern
//
//  Created by Иван Галкин on 22.01.2024.
//

//
// Декоратор
// Паттерн, структурирующий объекты.
//
// Назначение:
// Динамически добавляет новые обязанности. Является гибкой альтернативной порождению подклассов с целью
// расширения функциональностьи.
//
// Другие названия:
// Wrapper (обертка)
//
// Применимость:
// - динамическое, прозрачное для клиентов добавление обязанностей объектам (не затрагивающее другие объекты);
// - реализация обязанностей, которые могут быть сняты с объекта;
// - расширение путем порождения подклассов по каким-то причинам неудобно или невозможно. Иногда приходится
// реализовывать много независимых расширений, так что порождение подклассов для поддержки всех возможных комбинаций
// приведет к стремительному росту их числа. В других случаях определение класса может быть скрыто или почему-либо
// еще недоступно, так что породить от него подкласс нельзя.
//
// Результаты:
// У паттера есть, по крайней мере, два плюса и два минуса:
// - большая гибкость, нежели у статического наследования;
// - позволяет избежать перегруженных функциями классов на верхних уровнях иерархии;
// - декоратор и его компонент не идентичны;
// - множество мелких объектов.
//
// Родственные паттерны:
// Адаптер: декоратор изменяет только обязанности объекта, не меняя интерфейса, а адаптер придает объекту
// совершенно новый интерфейс.
// Компоновщик: декоратор можно считать выроденным случаем составного объекта, у которого есть только один компонент.
// Однако декоратор добавляет новые обязанности, агрегирование объектов не является его целью.
// Стратегия: декоратор позволяет изменить внешний облик объекта, стратегия - его внутреннее содержание.
// Это два взаимодополняющих способа изменения объекта.
//

//
// Отношения:
//  - Decorator переадресует запросы объекту Component. Может выполнять и дополнительные операции до и после переадресации.
//
// Аспекты реализации:
// - соответствение интерфейсов;
// - отсутствие абстрактного класса Decorator;
// - облегченные классы Component;
// - изменение облика, а не внутреннего устройства объекта.
//

// Компонент
// - определяет интерфейс для объектов, на которые могут быть динамически возложены дополнительные обязанности.
protocol Component {
    func operation()
}

// Конкретный компонент
// - определяет объект, на который возлагаются дополнительные обязанности;
class ConcreteComponent: Component {
    func operation() -> Void {}
}

// Декоратор
// - хранит ссылку на объект Component и определяет интерфейс, соответствующий интерфейсу Component.
protocol Decorator {
    func operation()
}

// Конкретный декоратор
// - возлагает дополнительные обязанности на компонент.
class ConcreteDecorator: Decorator {
    func operation() {
        var component: Component = ConcreteComponent()
        component.operation()
    }
    
    func addedBehavior()  -> Void {}
}
