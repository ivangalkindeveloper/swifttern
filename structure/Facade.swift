//
//  facade.swift
//  swifttern
//
//  Created by Иван Галкин on 22.01.2024.
//

//
// Фасад
// Паттерн, структурирующий объекты.
//
// Назначение:
// Предоставляет унифицированный интерфейс вместо набора интерфейсов некоторой подсистемы.
// Фасад определяет интерфейс более высокого уровня, который упрощает использование подсистемы.
//
// Применимость:
// - предоставление простого интерфейса к сложной подсистеме;
// - многочисленные зависимости между клиентами и классами реализации абстракции;
// - требуется разложить подсистему на отдельные уровни.
//
// Результаты:
// - фасад изолирует клиентов от компонентов подсистемы, уменьшая тем самым число объектов, с которыми клиентам
// приходится иметь дело, и упрощая работу с подсистемой;
// - позволяет ослабить связанность между подсистемой и ее клиентами;
// - фасад не препятствует приложениям напрямую обращаться к классам подсистемы, если это необходимо.
//
// Родственные паттерны:
// Паттерн абстрактная фабрика допустимо использоваться вместе с фасадом, чтобы предоставить интерфейс для создания
// объектов подсистем способом, независимым от этих подсистем. Абстрактная фабрика может выступать и как
// альтернатива фасаду, чтобы скрыть платформеннозависимые классы.
// Паттерн посредник аналогичен фасаду в том смысле, что асбтрагирует фукнциональность существующих классов.
// Однако назначение посредника - абстрагировать произвольное взаимодействие между "сотрудничающими" объектами.
// Часто он централизует фукнциональность, не присущую ни одному из них. Коллеги посредника знают о его существовании
// и обмениваются информацией именно с ним, а не напрямую между собой. С другой стороны, фасад просто абстрагирует
// интерфейс объектов подсистемы, чтобы ими было проще пользоваться. Он не определяет новой фукнциональности,
// и классам подсистемы ничего неизвестно о его существовании.
// Обычно в системе должен существовать только один фасад, поэтому объекты фасадов часто бывают одиночками.
//

//
// Отношения:
// - клиенты общаются с подсистемой, посылая запросы фасаду. Он переадресует их подходящим объектам внутри подсистемы.
// Хотя основную работу выполняют именно объекты подсистемы, фасаду, возможно, придется преобразовать свой
// интерфейс в интерфейсы подсистемы.
// - клиенты, пользующиеся фасадом, не имеют прямого доступа к объектам подсистемы.
//
// Аспекты реализации:
// - ослабление связанности клиента с подсистемой;
// - открытые и закрытые классы подсистем.
//

// Фасад
// - знает, каким классам подсистемы адресовать запрос;
// - делегирует запросы клиентов подходящим объектам внутри подсистемы.
class Facade {
    private var scanner: Scanner = Scanner()
    private var parser: Parser = Parser()
    private var builder: Builder = Builder()
    
    func scan() {
        self.scanner.scan()
    }
    
    func parse() {
        self.parser.parse()
    }
    
    func build() {
        self.builder.build()
    }
}

// Классы подсистемы
// - реализуют функциональность подсистемы;
// - выполняют работу, порученную объектом Facade;
// - ничего не "знают" о существовании фасада, то есть не хранят ссылок на него.
class Scanner {
    func scan() {}
}

class Parser {
    func parse() {}
}

class Builder {
    func build() {}
}
