//
//  singleton.swift
//  swifttern
//
//  Created by Иван Галкин on 15.01.2024.
//

//
// Одиночка
// Паттерн, порождающий объекты.
//
// Назначение:
// Гарантирует, что у класса существует только один экземпляр, и предоставляет к нему глобальную точку дсотупа.
//
// Применимость:
// - должен существовать ровно один экземпляр некоторого класса, к которому может обратиться любой клиент через известную точку доступа;
// - единственный экземпляр должен расширяться путем порождения подклассов, а клиенты должны иметь возможность работать
// с расширенным экземпляром без модификации своего кода.
//
// Результаты:
// - контролируемый доступ к единственному экземпляру;
// - сокращение прострнства имен;
// - возможность уточнения операций и представления;
// - возможность использования переменного числа экземпляров;
// - большая гибкость6 чем у операций класса.
//
// Родственные паттерны:
// С помощью паттерна одиночка могут быть реализованы многие паттерны, например абстрактная фабрика, строитель или прототип.
//

//
// Отношения:
// Клиенты получают доступ к экземпляру класса Singleton только через его операцию instance.
//
// Аспекты реализации:
// - гарантии существования единственного экземпляра;
// - порождение классов Singleton.
//

// Одиночка
// - определяет операцию Instance, которая позволяет клиентам получить доступ к единственному экземпляру.
// Instance - это операция класса, то есть метод класса или статическая функция;
// - может нести ответственность за создание собственного уникального экземпляра;
class Singleton {
    init() {
        if (self.instance == nil) {
            self.instance = Singleton()
        }
    }
    
    private var  instance: Singleton? = nil
}
