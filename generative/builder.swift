//
//  builder.swift
//  swifttern
//
//  Created by Иван Галкин on 13.01.2024.
//

//
// Строитель
// Паттерн, порождающий объекты.
//
// Назначение:
// Отделяет конструкирование сложного объекта от его представления,
// так что в результате одного и того же процесса конструирования могут получаться разные представления.
//
// Применимость:
// - алгоритм создания сложного объекта не должен зависеть от того, из каких частей состоит объект
// и как они стыкуются между собой;
// - процесс конструирования должен обеспечивать различные представления конструируемого объекта.
//
// Результаты:
// - позволяет изменять внутреннее представление продукта;
// - изолирует код, реализующий конструирование и представление;
// - предоставляет более точный контроль наж процессом конструирования объекта;
//
// Родственные паттерны:
// Абстрактная фабрика похожа на строителя в том смысле, что может конструировать сложные объекты.
// Основное различие между ними а том, что строитель специализируется на пошаговом конструкировании объекта,
// а абстрактная фабрика - на создании семейств простых или сложнных объектовю
// Строитель возвращает продукт на последнем шаге, тогда как с точки зрения абстрактной фабрики
// продукт возвращается немедленно.
//

//
// Отношения:
// - клиент создает объект-распорядитель Director и настраивает его нужным объектом-строителем Buidler;
// - распорядитель уведомляет строителя о том, что нужно посмтроить очередную часть продукта;
// - строитель обрабатывает запросы распорядителя и добавляет новые части к продукту;
// - клиент забирает продукт у строителя;
//
// Аспекты реализации:
// Обычно существует абстрактный класс Builder, в котором определены операции для каждого компонента, который
// может потребовать создать распорядитель. По умолчанию эти операции ничего не делают. Но в классе конкретного
// строителя ConcreteBuilder они замещены для тех компонентов, в создании которых он принимает участие.
// - интерфейс сборки и конструирования;
// - производимые продукты могут быть абсолютно разными, поэтому нет инетрфейса для продукта;
// - пустые методы класса Builder по-умолчанию.
//

// Строитель
// - задает абстрактный интерфейс для создания частей объекта Product.
protocol Builder {
     func buildPart() -> Product
}

// Конкретный строитель
// - конструирует и собирает вместе части продукта посредством реализации интерфейса Product;
// - определяет создаваемое представление и следит за ним;
// - предоставляет интерфейс для доcтупа к продукту.
class ConcreteBuilder: Builder {
    func buildPart() -> Product {}
}

// Продукт
// - предоставляет сложный конструируемый объект. ConcreteBuilder строит внутренее представление продукта
// и определяет процесс его сборки;
// - включает классы, которые определяют составные части, в том числе интерфейсы для сборки конечного результата.
class Product {}

// Распорядитель
// - конструирует объект, пользуясь интерфейсом Builder.
class Director {
    init(builder: Builder) {
        self.builder = builder
    }
    
    var builder: Builder
    
    func construct() {
        var product: Product = self.builder.buildPart()
    }
}
