//
//  factory_method.swift
//  swifttern
//
//  Created by Иван Галкин on 14.01.2024.
//

//
// Фабричный метод
// Паттерн, порождающий объекты.
//
// Назначение:
// Определяет интерфейс для создания объекта, но оставляет подклассам решение о том, экземпляры какого класса
// должны создаваться. Фабричный метод позволяет классу делегировать создание экземляров подклассам.
//
// Другие названия:
// Virtual constructor (виртуальный конструктор)
//
// Применимость:
// - классу заранее неизвестно, объекты каких классов ему нужно создавать;
// - класс спроектирован так, чтобы объекты, которые он создает, определялись подклассами;
// - класс делегирует свои обязанности одному из нескольких вспомогательных подклассов, и нужно локализовать
// информацию о том, какой класс принимает эти обязанности на себя.
//
// Результаты:
// Фабричные методы избаврялют проектировщика от необходимости встривать в код зависящие от приложения классы.
// Код имеет дело только с интерфейом класса Product, поэтому он может работать с любыми определенными пользователями
// классами конкретных продуктов.
// Потенциальный недостаток фабричного метода состоит в том, что клиентам, возможно, придется создавать подкласса
// класса Creator для создания лишь одного обхекта ConcreteProduct. Порождение подклассов оправдано,
// если клиенту так и иначе приходится создавать подклассы Creator, в противном случае клиенту придется иметь дело
// с дополнтиельным уровнем подклассов.
// Два последствия применения паттерна фабричный метод:
// - подклассам предсотавляется операции-зацепки (hooks);
// - соединение параллельных иерархий.
//
// Родственные паттерны:
// Абстрактная фабрика часто реализуется с помощью фабричных методов.
// Паттерн фабричный метод часто вызывается внутри шаблонных методов.
// Прототипы не нуждаются в порождении подклассов от Creator. Однако им часто бывает необходима операция Initialize
// в классе Product. Creator использует Initialize для инициализации объекта.
// Фабричному методу такая операция не требуется.
//

//
// Отношения:
// - Creator полагается на свои подклассы в определии фабричного метода, который будет возвращать экземпляр
// подходящего конкретного продукта.
//
// Аспекты реализации:
// - две основных разновидности паттерна: (1) когда Creator является абстрактным и не содержит реализации фабричного
// метода, и (2) Creator - конкретный класс, в котором по умолчанию есть реализация фабричного метода.
// Редко, но бывает Creator абстрактным с реализацией фабричного метода.
// - параметризованные фабричные методы;
// - вариации и проблемы, зависящие от конкретного языка;
// - использование шаблонов, чтобы не порождать подклассы;
// - соглашения об именах.
//

// Продукт
// - определяет интерфейс объектов, создаваемых фабричным методом.
protocol Product {}

// Конкретный продукт
// - реализует интерфейс Product.
class ConcreteProduct: Product {}

// Создатель
// - объявляет фабричный метод, возвращающийй объект типа Product;
// - Creator может также определять реализацию по умолчанию фабричного метода, который возвращает объект ConcreteProduct.
protocol Creator {
     func factoryMethod() -> Product
}

// Конкретный создатель
// - замещает фабричный метод, возвращающий объект ConcreteProduct.
class ConcreteCreator: Creator {
    func factoryMethod() -> Product {}
}
